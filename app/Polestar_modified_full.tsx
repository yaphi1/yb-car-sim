/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ../public/models/polestar_modified/polestar_modified_full.glb --types --transform --instanceall 
Files: ../public/models/polestar_modified/polestar_modified_full.glb [55.54MB] > /Users/yaphi/Documents/code/yb-car-sim/app/polestar_modified_full-transformed.glb [2.27MB] (96%)
*/

import * as THREE from 'three'
import React, { useRef, useMemo, useContext, createContext } from 'react'
import { useGLTF, Merged } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Brake_disc_Brake_Disc_0: THREE.Mesh
    Brembo_Calipers_Brembo_Calipers_0: THREE.Mesh
    Logo_Plane_Logo_Plane_0: THREE.Mesh
    Pirelli_P_Zero_Tire_Pirelli_P_Zero_Tire_0: THREE.Mesh
    Polestar1_Rim_Chrome002_Polestar1_Rim_Chrome_0: THREE.Mesh
    Polestar_1_Polestar1_Blackout_0: THREE.Mesh
    Polestar_1_Polestar_1_Car_Paint_0: THREE.Mesh
    Polestar_1_Polestar_1_Chrome_0: THREE.Mesh
    Polestar_1_Polestar_1_Lamps_0: THREE.Mesh
    Polestar_1_Polestar_1_Plastic_0: THREE.Mesh
    Polestar_1_Polestar_1_Windows_0: THREE.Mesh
    Polestar_1_Polestar_1_Windows_Red_Glass_0: THREE.Mesh
    Polestar_1_Polestar_1_Windows_White_Glass_0: THREE.Mesh
  }
  materials: {
    Brake_Disc: THREE.MeshStandardMaterial
    Brembo_Calipers: THREE.MeshPhysicalMaterial
    PaletteMaterial001: THREE.MeshStandardMaterial
    Pirelli_P_Zero_Tire: THREE.MeshStandardMaterial
    Polestar1_Rim_Chrome: THREE.MeshStandardMaterial
    PaletteMaterial002: THREE.MeshStandardMaterial
    PaletteMaterial003: THREE.MeshStandardMaterial
    Polestar_1_Chrome: THREE.MeshStandardMaterial
    Polestar_1_Lamps: THREE.MeshStandardMaterial
    Polestar_1_Plastic: THREE.MeshStandardMaterial
    PaletteMaterial004: THREE.MeshStandardMaterial
    PaletteMaterial005: THREE.MeshPhysicalMaterial
    PaletteMaterial006: THREE.MeshPhysicalMaterial
  }
  animations: GLTFAction[]
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

const context = createContext({} as ContextType)
export function Instances({ children, ...props }: JSX.IntrinsicElements['group']) {
  const { nodes } = useGLTF('/polestar_modified_full-transformed.glb') as GLTFResult
  const instances = useMemo(
    () => ({
      BrakediscBrakeDisc: nodes.Brake_disc_Brake_Disc_0,
      BremboCalipersBremboCalipers: nodes.Brembo_Calipers_Brembo_Calipers_0,
      LogoPlaneLogoPlane: nodes.Logo_Plane_Logo_Plane_0,
      PirelliPZeroTirePirelliPZeroTire: nodes.Pirelli_P_Zero_Tire_Pirelli_P_Zero_Tire_0,
      PolestarRimChromePolestarRimChrome: nodes.Polestar1_Rim_Chrome002_Polestar1_Rim_Chrome_0,
      PolestarPolestarBlackout: nodes.Polestar_1_Polestar1_Blackout_0,
      PolestarPolestarCarPaint: nodes.Polestar_1_Polestar_1_Car_Paint_0,
      PolestarPolestarChrome: nodes.Polestar_1_Polestar_1_Chrome_0,
      PolestarPolestarLamps: nodes.Polestar_1_Polestar_1_Lamps_0,
      PolestarPolestarPlastic: nodes.Polestar_1_Polestar_1_Plastic_0,
      PolestarPolestarWindows: nodes.Polestar_1_Polestar_1_Windows_0,
      PolestarPolestarWindowsRedGlass: nodes.Polestar_1_Polestar_1_Windows_Red_Glass_0,
      PolestarPolestarWindowsWhiteGlass: nodes.Polestar_1_Polestar_1_Windows_White_Glass_0,
    }),
    [nodes],
  )
  return (
    <Merged meshes={instances} {...props}>
      {(instances: ContextType) => <context.Provider value={instances} children={children} />}
    </Merged>
  )
}

export function Model(props: JSX.IntrinsicElements['group']) {
  const instances = useContext(context)
  return (
    <group {...props} dispose={null}>
      <instances.BrakediscBrakeDisc position={[0.778, 0.348, 1.378]} rotation={[-1.589, -0.036, -0.464]} scale={0.081} />
      <instances.BremboCalipersBremboCalipers position={[0.778, 0.348, 1.378]} rotation={[-2.148, -0.013, -0.042]} scale={0.081} />
      <instances.LogoPlaneLogoPlane position={[0.778, 0.348, 1.378]} rotation={[-2.148, -0.013, -0.042]} scale={0.081} />
      <instances.PirelliPZeroTirePirelliPZeroTire position={[0.778, 0.348, 1.378]} rotation={[-1.573, -0.04, -0.05]} scale={0.468} />
      <instances.PolestarRimChromePolestarRimChrome position={[0.778, 0.348, 1.378]} rotation={[-1.573, -0.04, -0.05]} scale={1.058} />
      <instances.PolestarPolestarBlackout rotation={[-Math.PI / 2, 0, 0]} />
      <instances.PolestarPolestarCarPaint rotation={[-Math.PI / 2, 0, 0]} />
      <instances.PolestarPolestarChrome rotation={[-Math.PI / 2, 0, 0]} />
      <instances.PolestarPolestarLamps rotation={[-Math.PI / 2, 0, 0]} />
      <instances.PolestarPolestarPlastic rotation={[-Math.PI / 2, 0, 0]} />
      <instances.PolestarPolestarWindows rotation={[-Math.PI / 2, 0, 0]} />
      <instances.PolestarPolestarWindowsRedGlass rotation={[-Math.PI / 2, 0, 0]} />
      <instances.PolestarPolestarWindowsWhiteGlass rotation={[-Math.PI / 2, 0, 0]} />
    </group>
  )
}

useGLTF.preload('/polestar_modified_full-transformed.glb')
